#pragma version 10
#pragma typetrack false

// smart_contracts.task_three.contract.SmartASAController.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 32 4
    bytecblock "total_minted" 0x151f7c75 "" "whitelist" "asa_id"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/task_three/contract.py:8
    // self.asa_id = UInt64(0)
    bytec 4 // "asa_id"
    intc_0 // 0
    app_global_put
    // smart_contracts/task_three/contract.py:9
    // self.total_minted = UInt64(0)
    bytec_0 // "total_minted"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x8b29988f 0xba3565e2 0xd399e4f9 0xcc44bd18 0x12bcae35 // method "asset_create(uint64,uint64,string,string,string)uint64", method "add_to_whitelist(uint64,address)void", method "mint(uint64,uint64,address)bool", method "transfer(uint64,address,address,uint64)bool", method "remove_from_whitelist(uint64,address)void"
    txna ApplicationArgs 0
    match main_asset_create_route@5 main_add_to_whitelist_route@6 main_mint_route@7 main_transfer_route@8 main_remove_from_whitelist_route@9

main_after_if_else@12:
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    intc_0 // 0
    return

main_remove_from_whitelist_route@9:
    // smart_contracts/task_three/contract.py:92
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // smart_contracts/task_three/contract.py:92
    // @abimethod()
    callsub remove_from_whitelist
    intc_1 // 1
    return

main_transfer_route@8:
    // smart_contracts/task_three/contract.py:79
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    // smart_contracts/task_three/contract.py:79
    // @abimethod()
    callsub transfer
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_mint_route@7:
    // smart_contracts/task_three/contract.py:63
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // smart_contracts/task_three/contract.py:63
    // @abimethod()
    callsub mint
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_add_to_whitelist_route@6:
    // smart_contracts/task_three/contract.py:38
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // smart_contracts/task_three/contract.py:38
    // @abimethod()
    callsub add_to_whitelist
    intc_1 // 1
    return

main_asset_create_route@5:
    // smart_contracts/task_three/contract.py:11
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    // smart_contracts/task_three/contract.py:11
    // @abimethod()
    callsub asset_create
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/task_three/contract.py:4
    // class SmartASAController(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.task_three.contract.SmartASAController.asset_create(total: uint64, decimals: uint64, unit_name: bytes, asset_name: bytes, url: bytes) -> uint64:
asset_create:
    // smart_contracts/task_three/contract.py:11-19
    // @abimethod()
    // def asset_create(
    //     self,
    //     total: UInt64,
    //     decimals: UInt64,
    //     unit_name: String,
    //     asset_name: String,
    //     url: String
    // ) -> UInt64:
    proto 5 1
    // smart_contracts/task_three/contract.py:20
    // assert Txn.sender == Global.creator_address, "Only creator can create ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can create ASA
    // smart_contracts/task_three/contract.py:22-33
    // itxn_result = itxn.AssetConfig(
    //     total=total,
    //     decimals=decimals,
    //     unit_name=unit_name,
    //     asset_name=asset_name,
    //     url=url,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/task_three/contract.py:28
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/task_three/contract.py:29-31
    // reserve=Global.current_application_address,
    // freeze=Global.current_application_address,
    // clawback=Global.current_application_address,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    frame_dig -1
    itxn_field ConfigAssetURL
    frame_dig -2
    itxn_field ConfigAssetName
    frame_dig -3
    itxn_field ConfigAssetUnitName
    frame_dig -4
    itxn_field ConfigAssetDecimals
    frame_dig -5
    itxn_field ConfigAssetTotal
    // smart_contracts/task_three/contract.py:22
    // itxn_result = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    // smart_contracts/task_three/contract.py:32
    // fee=0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_three/contract.py:22-33
    // itxn_result = itxn.AssetConfig(
    //     total=total,
    //     decimals=decimals,
    //     unit_name=unit_name,
    //     asset_name=asset_name,
    //     url=url,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     fee=0
    // ).submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/task_three/contract.py:35
    // self.asa_id = itxn_result.created_asset.id
    bytec 4 // "asa_id"
    dig 1
    app_global_put
    // smart_contracts/task_three/contract.py:36
    // return self.asa_id
    retsub


// smart_contracts.task_three.contract.SmartASAController.add_to_whitelist(asa_id: uint64, account: bytes) -> void:
add_to_whitelist:
    // smart_contracts/task_three/contract.py:38-39
    // @abimethod()
    // def add_to_whitelist(self, asa_id: UInt64, account: Address) -> None:
    proto 2 0
    intc_0 // 0
    bytec_2 // ""
    dup
    // smart_contracts/task_three/contract.py:40
    // assert Txn.sender == Global.creator_address, "Only creator can add to whitelist"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can add to whitelist
    // smart_contracts/task_three/contract.py:42
    // if asa_id in self.whitelist:
    frame_dig -2
    itob
    bytec_3 // "whitelist"
    swap
    concat
    dup
    box_len
    bury 1
    bz add_to_whitelist_else_body@8
    // smart_contracts/task_three/contract.py:43
    // arr = self.whitelist[asa_id].copy()
    frame_dig 3
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.whitelist entry exists
    // smart_contracts/task_three/contract.py:44
    // for idx in urange(arr.length):
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 1

add_to_whitelist_for_header@2:
    // smart_contracts/task_three/contract.py:44
    // for idx in urange(arr.length):
    frame_dig 1
    frame_dig 2
    <
    bz add_to_whitelist_after_for@7
    // smart_contracts/task_three/contract.py:45
    // if arr[idx] == account:
    frame_dig 0
    extract 2 0
    frame_dig 1
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz add_to_whitelist_after_if_else@5
    // smart_contracts/task_three/contract.py:46
    // return  # Already whitelisted
    retsub

add_to_whitelist_after_if_else@5:
    // smart_contracts/task_three/contract.py:44
    // for idx in urange(arr.length):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b add_to_whitelist_for_header@2

add_to_whitelist_after_for@7:
    // smart_contracts/task_three/contract.py:47
    // arr.append(account)
    frame_dig 0
    extract 2 0
    frame_dig -1
    concat
    dup
    len
    intc_2 // 32
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/task_three/contract.py:48
    // self.whitelist[asa_id] = arr.copy()
    frame_dig 3
    dup
    box_del
    pop
    swap
    box_put
    retsub

add_to_whitelist_else_body@8:
    // smart_contracts/task_three/contract.py:51
    // new_arr.append(account)
    frame_dig -1
    len
    intc_2 // 32
    /
    itob
    extract 6 2
    frame_dig -1
    concat
    // smart_contracts/task_three/contract.py:52
    // self.whitelist[asa_id] = new_arr.copy()
    frame_dig 3
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts.task_three.contract.SmartASAController.is_whitelisted(asa_id: uint64, account: bytes) -> uint64:
is_whitelisted:
    // smart_contracts/task_three/contract.py:54-55
    // @subroutine
    // def is_whitelisted(self, asa_id: UInt64, account: Address) -> bool:
    proto 2 1
    intc_0 // 0
    bytec_2 // ""
    dup
    // smart_contracts/task_three/contract.py:56
    // if asa_id in self.whitelist:
    frame_dig -2
    itob
    bytec_3 // "whitelist"
    swap
    concat
    dup
    box_len
    bury 1
    bz is_whitelisted_after_if_else@8
    // smart_contracts/task_three/contract.py:57
    // arr = self.whitelist[asa_id].copy()
    frame_dig 3
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.whitelist entry exists
    // smart_contracts/task_three/contract.py:58
    // for idx in urange(arr.length):
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 1

is_whitelisted_for_header@2:
    // smart_contracts/task_three/contract.py:58
    // for idx in urange(arr.length):
    frame_dig 1
    frame_dig 2
    <
    bz is_whitelisted_after_if_else@8
    // smart_contracts/task_three/contract.py:59
    // if arr[idx] == account:
    frame_dig 0
    extract 2 0
    frame_dig 1
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz is_whitelisted_after_if_else@5
    // smart_contracts/task_three/contract.py:60
    // return True
    intc_1 // 1
    frame_bury 0
    retsub

is_whitelisted_after_if_else@5:
    // smart_contracts/task_three/contract.py:58
    // for idx in urange(arr.length):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b is_whitelisted_for_header@2

is_whitelisted_after_if_else@8:
    // smart_contracts/task_three/contract.py:61
    // return False
    intc_0 // 0
    frame_bury 0
    retsub


// smart_contracts.task_three.contract.SmartASAController.mint(asa_id: uint64, amount: uint64, receiver: bytes) -> uint64:
mint:
    // smart_contracts/task_three/contract.py:63-64
    // @abimethod()
    // def mint(self, asa_id: UInt64, amount: UInt64, receiver: Address) -> bool:
    proto 3 1
    // smart_contracts/task_three/contract.py:65
    // assert Txn.sender == Global.creator_address, "Only creator can mint"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can mint
    // smart_contracts/task_three/contract.py:66
    // assert self.is_whitelisted(asa_id, receiver), "Receiver not whitelisted"
    frame_dig -3
    frame_dig -1
    callsub is_whitelisted
    assert // Receiver not whitelisted
    // smart_contracts/task_three/contract.py:68
    // self.total_minted += amount
    intc_0 // 0
    bytec_0 // "total_minted"
    app_global_get_ex
    assert // check self.total_minted exists
    frame_dig -2
    +
    bytec_0 // "total_minted"
    swap
    app_global_put
    // smart_contracts/task_three/contract.py:70-76
    // itxn.AssetTransfer(
    //     xfer_asset=asa_id,
    //     asset_amount=amount,
    //     asset_sender=Global.current_application_address,
    //     asset_receiver=receiver.native,
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/task_three/contract.py:73
    // asset_sender=Global.current_application_address,
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field AssetReceiver
    itxn_field AssetSender
    frame_dig -2
    itxn_field AssetAmount
    frame_dig -3
    itxn_field XferAsset
    // smart_contracts/task_three/contract.py:70
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    // smart_contracts/task_three/contract.py:75
    // fee=0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_three/contract.py:70-76
    // itxn.AssetTransfer(
    //     xfer_asset=asa_id,
    //     asset_amount=amount,
    //     asset_sender=Global.current_application_address,
    //     asset_receiver=receiver.native,
    //     fee=0
    // ).submit()
    itxn_submit
    // smart_contracts/task_three/contract.py:77
    // return True
    intc_1 // 1
    retsub


// smart_contracts.task_three.contract.SmartASAController.transfer(asa_id: uint64, sender: bytes, receiver: bytes, amount: uint64) -> uint64:
transfer:
    // smart_contracts/task_three/contract.py:79-80
    // @abimethod()
    // def transfer(self, asa_id: UInt64, sender: Address, receiver: Address, amount: UInt64) -> bool:
    proto 4 1
    // smart_contracts/task_three/contract.py:81
    // assert self.is_whitelisted(asa_id, receiver), "Receiver not whitelisted"
    frame_dig -4
    frame_dig -2
    callsub is_whitelisted
    assert // Receiver not whitelisted
    // smart_contracts/task_three/contract.py:83-89
    // itxn.AssetTransfer(
    //     xfer_asset=asa_id,
    //     asset_amount=amount,
    //     asset_sender=sender.native,
    //     asset_receiver=receiver.native,
    //     fee=0
    // ).submit()
    itxn_begin
    frame_dig -2
    itxn_field AssetReceiver
    frame_dig -3
    itxn_field AssetSender
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -4
    itxn_field XferAsset
    // smart_contracts/task_three/contract.py:83
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    // smart_contracts/task_three/contract.py:88
    // fee=0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/task_three/contract.py:83-89
    // itxn.AssetTransfer(
    //     xfer_asset=asa_id,
    //     asset_amount=amount,
    //     asset_sender=sender.native,
    //     asset_receiver=receiver.native,
    //     fee=0
    // ).submit()
    itxn_submit
    // smart_contracts/task_three/contract.py:90
    // return True
    intc_1 // 1
    retsub


// smart_contracts.task_three.contract.SmartASAController.remove_from_whitelist(asa_id: uint64, account: bytes) -> void:
remove_from_whitelist:
    // smart_contracts/task_three/contract.py:92-93
    // @abimethod()
    // def remove_from_whitelist(self, asa_id: UInt64, account: Address) -> None:
    proto 2 0
    intc_0 // 0
    dupn 3
    bytec_2 // ""
    dup
    // smart_contracts/task_three/contract.py:94
    // assert Txn.sender == Global.creator_address, "Only creator can remove from whitelist"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can remove from whitelist
    // smart_contracts/task_three/contract.py:96
    // if asa_id in self.whitelist:
    frame_dig -2
    itob
    bytec_3 // "whitelist"
    swap
    concat
    dup
    box_len
    bury 1
    bz remove_from_whitelist_after_if_else@8
    // smart_contracts/task_three/contract.py:97
    // arr = self.whitelist[asa_id].copy()
    frame_dig 6
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.whitelist entry exists
    // smart_contracts/task_three/contract.py:98
    // new_arr = DynamicArray[Address]()
    pushbytes 0x0000
    frame_bury 1
    // smart_contracts/task_three/contract.py:99
    // for idx in urange(arr.length):
    intc_0 // 0
    extract_uint16
    frame_bury 5
    intc_0 // 0
    frame_bury 4

remove_from_whitelist_for_header@2:
    // smart_contracts/task_three/contract.py:99
    // for idx in urange(arr.length):
    frame_dig 4
    frame_dig 5
    <
    bz remove_from_whitelist_after_for@7
    // smart_contracts/task_three/contract.py:100
    // if arr[idx] != account:
    frame_dig 0
    extract 2 0
    frame_dig 4
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 3
    frame_dig -1
    !=
    frame_dig 1
    frame_bury 2
    bz remove_from_whitelist_after_if_else@5
    // smart_contracts/task_three/contract.py:101
    // new_arr.append(arr[idx])
    frame_dig 1
    extract 2 0
    frame_dig 3
    concat
    dup
    len
    intc_2 // 32
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 2

remove_from_whitelist_after_if_else@5:
    frame_dig 2
    frame_bury 1
    // smart_contracts/task_three/contract.py:99
    // for idx in urange(arr.length):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b remove_from_whitelist_for_header@2

remove_from_whitelist_after_for@7:
    // smart_contracts/task_three/contract.py:102
    // self.whitelist[asa_id] = new_arr.copy()
    frame_dig 6
    dup
    box_del
    pop
    frame_dig 1
    box_put

remove_from_whitelist_after_if_else@8:
    retsub
