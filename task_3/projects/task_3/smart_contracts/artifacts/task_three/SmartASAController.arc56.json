{
    "name": "SmartASAController",
    "structs": {},
    "methods": [
        {
            "name": "asset_create",
            "args": [
                {
                    "type": "uint64",
                    "name": "total"
                },
                {
                    "type": "uint64",
                    "name": "decimals"
                },
                {
                    "type": "string",
                    "name": "unit_name"
                },
                {
                    "type": "string",
                    "name": "asset_name"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_to_whitelist",
            "args": [
                {
                    "type": "uint64",
                    "name": "asa_id"
                },
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "uint64",
                    "name": "asa_id"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "address",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer",
            "args": [
                {
                    "type": "uint64",
                    "name": "asa_id"
                },
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "address",
                    "name": "receiver"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_from_whitelist",
            "args": [
                {
                    "type": "uint64",
                    "name": "asa_id"
                },
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asa_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNhX2lk"
                },
                "total_minted": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfbWludGVk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "whitelist": {
                    "keyType": "uint64",
                    "valueType": "address[]",
                    "prefix": "d2hpdGVsaXN0"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        387,
                        504,
                        686
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        109,
                        128,
                        165,
                        199,
                        218
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        338
                    ],
                    "errorMessage": "Only creator can add to whitelist"
                },
                {
                    "pc": [
                        277
                    ],
                    "errorMessage": "Only creator can create ASA"
                },
                {
                    "pc": [
                        536
                    ],
                    "errorMessage": "Only creator can mint"
                },
                {
                    "pc": [
                        631
                    ],
                    "errorMessage": "Only creator can remove from whitelist"
                },
                {
                    "pc": [
                        544,
                        591
                    ],
                    "errorMessage": "Receiver not whitelisted"
                },
                {
                    "pc": [
                        266
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        112,
                        131,
                        168,
                        202,
                        221
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        548
                    ],
                    "errorMessage": "check self.total_minted exists"
                },
                {
                    "pc": [
                        361,
                        478,
                        654
                    ],
                    "errorMessage": "check self.whitelist entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEgBCYFDHRvdGFsX21pbnRlZAQVH3x1AAl3aGl0ZWxpc3QGYXNhX2lkMRhAAAcnBCJnKCJnMRtBAMSCBQSLKZiPBLo1ZeIE05nk+QTMRL0YBBK8rjU2GgCOBQBvAFwAOgAVAAIiQzEZFEQxGEQ2GgEXNhoCiAHvI0MxGRREMRhENhoBFzYaAjYaAzYaBBeIAbCAAQAiTwJUKUxQsCNDMRkURDEYRDYaARc2GgIXNhoDiAFZgAEAIk8CVClMULAjQzEZFEQxGEQ2GgEXNhoCiAByI0MxGRREMRhENhoBFzYaAhc2GgNXAgA2GgRXAgA2GgVXAgCIABIWKUxQsCNDMRlA/2ExGBREI0OKBQExADIJEkSxMgpHA7IssiuyKrIpi/+yJ4v+siaL/bIli/yyI4v7siKBA7IQIrIBs7Q8JwRLAWeJigIAIipJMQAyCRJEi/4WK0xQSb1FAUEATosDvkxJTgKMAEQiWYwCIowBiwGLAgxBABuLAFcCAIsBJAskWIv/EkEAAYmLASMIjAFC/92LAFcCAIv/UEkVJAoWVwYCTFCLA0m8SEy/iYv/FSQKFlcGAov/UIsDSbxITL+JigIBIipJi/4WK0xQSb1FAUEAN4sDvkxJTgKMAEQiWYwCIowBiwGLAgxBAB6LAFcCAIsBJAskWIv/EkEABCOMAImLASMIjAFC/9oijACJigMBMQAyCRJEi/2L/4j/okQiKGVEi/4IKExnsTIKi/+yFLITi/6yEov9shElshAisgGzI4mKBAGL/Iv+iP9zRLGL/rIUi/2yE4v/shKL/LIRJbIQIrIBsyOJigIAIkcDKkkxADIJEkSL/hYrTFBJvUUBQQBgiwa+TElOAowARIACAACMASJZjAUijASLBIsFDEEAOYsAVwIAiwQkCyRYSYwDi/8TiwGMAkEAFIsBVwIAiwNQSRUkChZXBgJMUIwCiwKMAYsEIwiMBEL/v4sGSbxIiwG/iQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}