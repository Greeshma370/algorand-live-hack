# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "total"}, {"type": "uint64", "name": "decimals"}, {"type": "string", "name": "unit_name"}, {"type": "string", "name": "asset_name"}, {"type": "string", "name": "url"}], "name": "asset_create", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asa_id"}, {"type": "address", "name": "account"}], "name": "add_to_whitelist", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asa_id"}, {"type": "uint64", "name": "amount"}, {"type": "address", "name": "receiver"}], "name": "mint", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asa_id"}, {"type": "address", "name": "sender"}, {"type": "address", "name": "receiver"}, {"type": "uint64", "name": "amount"}], "name": "transfer", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asa_id"}, {"type": "address", "name": "account"}], "name": "remove_from_whitelist", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "SmartASAController", "state": {"keys": {"box": {}, "global": {"asa_id": {"key": "YXNhX2lk", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_minted": {"key": "dG90YWxfbWludGVk", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"whitelist": {"keyType": "uint64", "valueType": "address[]", "prefix": "d2hpdGVsaXN0"}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 2}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAEAAEgBCYFDHRvdGFsX21pbnRlZAQVH3x1AAl3aGl0ZWxpc3QGYXNhX2lkMRhAAAcnBCJnKCJnMRtBAMSCBQSLKZiPBLo1ZeIE05nk+QTMRL0YBBK8rjU2GgCOBQBvAFwAOgAVAAIiQzEZFEQxGEQ2GgEXNhoCiAHvI0MxGRREMRhENhoBFzYaAjYaAzYaBBeIAbCAAQAiTwJUKUxQsCNDMRkURDEYRDYaARc2GgIXNhoDiAFZgAEAIk8CVClMULAjQzEZFEQxGEQ2GgEXNhoCiAByI0MxGRREMRhENhoBFzYaAhc2GgNXAgA2GgRXAgA2GgVXAgCIABIWKUxQsCNDMRlA/2ExGBREI0OKBQExADIJEkSxMgpHA7IssiuyKrIpi/+yJ4v+siaL/bIli/yyI4v7siKBA7IQIrIBs7Q8JwRLAWeJigIAIipJMQAyCRJEi/4WK0xQSb1FAUEATosDvkxJTgKMAEQiWYwCIowBiwGLAgxBABuLAFcCAIsBJAskWIv/EkEAAYmLASMIjAFC/92LAFcCAIv/UEkVJAoWVwYCTFCLA0m8SEy/iYv/FSQKFlcGAov/UIsDSbxITL+JigIBIipJi/4WK0xQSb1FAUEAN4sDvkxJTgKMAEQiWYwCIowBiwGLAgxBAB6LAFcCAIsBJAskWIv/EkEABCOMAImLASMIjAFC/9oijACJigMBMQAyCRJEi/2L/4j/okQiKGVEi/4IKExnsTIKi/+yFLITi/6yEov9shElshAisgGzI4mKBAGL/Iv+iP9zRLGL/rIUi/2yE4v/shKL/LIRJbIQIrIBsyOJigIAIkcDKkkxADIJEkSL/hYrTFBJvUUBQQBgiwa+TElOAowARIACAACMASJZjAUijASLBIsFDEEAOYsAVwIAiwQkCyRYSYwDi/8TiwGMAkEAFIsBVwIAiwNQSRUkChZXBgJMUIwCiwKMAYsEIwiMBEL/v4sGSbxIiwG/iQ==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMudGFza190aHJlZS5jb250cmFjdC5TbWFydEFTQUNvbnRyb2xsZXIuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDMyIDQKICAgIGJ5dGVjYmxvY2sgInRvdGFsX21pbnRlZCIgMHgxNTFmN2M3NSAiIiAid2hpdGVsaXN0IiAiYXNhX2lkIgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6OAogICAgLy8gc2VsZi5hc2FfaWQgPSBVSW50NjQoMCkKICAgIGJ5dGVjIDQgLy8gImFzYV9pZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6OQogICAgLy8gc2VsZi50b3RhbF9taW50ZWQgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzAgLy8gInRvdGFsX21pbnRlZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBTbWFydEFTQUNvbnRyb2xsZXIoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMAogICAgcHVzaGJ5dGVzcyAweDhiMjk5ODhmIDB4YmEzNTY1ZTIgMHhkMzk5ZTRmOSAweGNjNDRiZDE4IDB4MTJiY2FlMzUgLy8gbWV0aG9kICJhc3NldF9jcmVhdGUodWludDY0LHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHN0cmluZyl1aW50NjQiLCBtZXRob2QgImFkZF90b193aGl0ZWxpc3QodWludDY0LGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAibWludCh1aW50NjQsdWludDY0LGFkZHJlc3MpYm9vbCIsIG1ldGhvZCAidHJhbnNmZXIodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpYm9vbCIsIG1ldGhvZCAicmVtb3ZlX2Zyb21fd2hpdGVsaXN0KHVpbnQ2NCxhZGRyZXNzKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2Fzc2V0X2NyZWF0ZV9yb3V0ZUA1IG1haW5fYWRkX3RvX3doaXRlbGlzdF9yb3V0ZUA2IG1haW5fbWludF9yb3V0ZUA3IG1haW5fdHJhbnNmZXJfcm91dGVAOCBtYWluX3JlbW92ZV9mcm9tX3doaXRlbGlzdF9yb3V0ZUA5CgptYWluX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBTbWFydEFTQUNvbnRyb2xsZXIoQVJDNENvbnRyYWN0KToKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fcmVtb3ZlX2Zyb21fd2hpdGVsaXN0X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo5MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIFNtYXJ0QVNBQ29udHJvbGxlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6OTIKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiByZW1vdmVfZnJvbV93aGl0ZWxpc3QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdHJhbnNmZXJfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5Ojc5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NAogICAgLy8gY2xhc3MgU21hcnRBU0FDb250cm9sbGVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo3OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHRyYW5zZmVyCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX21pbnRfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NAogICAgLy8gY2xhc3MgU21hcnRBU0FDb250cm9sbGVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo2MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIG1pbnQKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkX3RvX3doaXRlbGlzdF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6MzgKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBTbWFydEFTQUNvbnRyb2xsZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYWRkX3RvX3doaXRlbGlzdAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9jcmVhdGVfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjExCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NAogICAgLy8gY2xhc3MgU21hcnRBU0FDb250cm9sbGVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToxMQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFzc2V0X2NyZWF0ZQogICAgaXRvYgogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBTbWFydEFTQUNvbnRyb2xsZXIoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLnRhc2tfdGhyZWUuY29udHJhY3QuU21hcnRBU0FDb250cm9sbGVyLmFzc2V0X2NyZWF0ZSh0b3RhbDogdWludDY0LCBkZWNpbWFsczogdWludDY0LCB1bml0X25hbWU6IGJ5dGVzLCBhc3NldF9uYW1lOiBieXRlcywgdXJsOiBieXRlcykgLT4gdWludDY0Ogphc3NldF9jcmVhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToxMS0xOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYXNzZXRfY3JlYXRlKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdG90YWw6IFVJbnQ2NCwKICAgIC8vICAgICBkZWNpbWFsczogVUludDY0LAogICAgLy8gICAgIHVuaXRfbmFtZTogU3RyaW5nLAogICAgLy8gICAgIGFzc2V0X25hbWU6IFN0cmluZywKICAgIC8vICAgICB1cmw6IFN0cmluZwogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byA1IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjIwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAiT25seSBjcmVhdG9yIGNhbiBjcmVhdGUgQVNBIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgY3JlYXRvciBjYW4gY3JlYXRlIEFTQQogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6MjItMzMKICAgIC8vIGl0eG5fcmVzdWx0ID0gaXR4bi5Bc3NldENvbmZpZygKICAgIC8vICAgICB0b3RhbD10b3RhbCwKICAgIC8vICAgICBkZWNpbWFscz1kZWNpbWFscywKICAgIC8vICAgICB1bml0X25hbWU9dW5pdF9uYW1lLAogICAgLy8gICAgIGFzc2V0X25hbWU9YXNzZXRfbmFtZSwKICAgIC8vICAgICB1cmw9dXJsLAogICAgLy8gICAgIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICByZXNlcnZlPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgZnJlZXplPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgY2xhd2JhY2s9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBmZWU9MAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6MjgKICAgIC8vIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToyOS0zMQogICAgLy8gcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gZnJlZXplPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyBjbGF3YmFjaz1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZHVwbiAzCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRGcmVlemUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICBmcmFtZV9kaWcgLTMKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQogICAgZnJhbWVfZGlnIC00CiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKICAgIGZyYW1lX2RpZyAtNQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToyMgogICAgLy8gaXR4bl9yZXN1bHQgPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgcHVzaGludCAzIC8vIGFjZmcKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBmZWU9MAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToyMi0zMwogICAgLy8gaXR4bl9yZXN1bHQgPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIHRvdGFsPXRvdGFsLAogICAgLy8gICAgIGRlY2ltYWxzPWRlY2ltYWxzLAogICAgLy8gICAgIHVuaXRfbmFtZT11bml0X25hbWUsCiAgICAvLyAgICAgYXNzZXRfbmFtZT1hc3NldF9uYW1lLAogICAgLy8gICAgIHVybD11cmwsCiAgICAvLyAgICAgbWFuYWdlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIHJlc2VydmU9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBmcmVlemU9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBjbGF3YmFjaz1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGZlZT0wCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6MzUKICAgIC8vIHNlbGYuYXNhX2lkID0gaXR4bl9yZXN1bHQuY3JlYXRlZF9hc3NldC5pZAogICAgYnl0ZWMgNCAvLyAiYXNhX2lkIgogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTozNgogICAgLy8gcmV0dXJuIHNlbGYuYXNhX2lkCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudGFza190aHJlZS5jb250cmFjdC5TbWFydEFTQUNvbnRyb2xsZXIuYWRkX3RvX3doaXRlbGlzdChhc2FfaWQ6IHVpbnQ2NCwgYWNjb3VudDogYnl0ZXMpIC0+IHZvaWQ6CmFkZF90b193aGl0ZWxpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTozOC0zOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYWRkX3RvX3doaXRlbGlzdChzZWxmLCBhc2FfaWQ6IFVJbnQ2NCwgYWNjb3VudDogQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gIiIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NDAKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJPbmx5IGNyZWF0b3IgY2FuIGFkZCB0byB3aGl0ZWxpc3QiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjcmVhdG9yIGNhbiBhZGQgdG8gd2hpdGVsaXN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0MgogICAgLy8gaWYgYXNhX2lkIGluIHNlbGYud2hpdGVsaXN0OgogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBieXRlY18zIC8vICJ3aGl0ZWxpc3QiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBhZGRfdG9fd2hpdGVsaXN0X2Vsc2VfYm9keUA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0MwogICAgLy8gYXJyID0gc2VsZi53aGl0ZWxpc3RbYXNhX2lkXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAzCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYud2hpdGVsaXN0IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NDQKICAgIC8vIGZvciBpZHggaW4gdXJhbmdlKGFyci5sZW5ndGgpOgogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9idXJ5IDIKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDEKCmFkZF90b193aGl0ZWxpc3RfZm9yX2hlYWRlckAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NDQKICAgIC8vIGZvciBpZHggaW4gdXJhbmdlKGFyci5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAyCiAgICA8CiAgICBieiBhZGRfdG9fd2hpdGVsaXN0X2FmdGVyX2ZvckA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0NQogICAgLy8gaWYgYXJyW2lkeF0gPT0gYWNjb3VudDoKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMiAvLyAzMgogICAgKgogICAgaW50Y18yIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGJ6IGFkZF90b193aGl0ZWxpc3RfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0NgogICAgLy8gcmV0dXJuICAjIEFscmVhZHkgd2hpdGVsaXN0ZWQKICAgIHJldHN1YgoKYWRkX3RvX3doaXRlbGlzdF9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0NAogICAgLy8gZm9yIGlkeCBpbiB1cmFuZ2UoYXJyLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMQogICAgYiBhZGRfdG9fd2hpdGVsaXN0X2Zvcl9oZWFkZXJAMgoKYWRkX3RvX3doaXRlbGlzdF9hZnRlcl9mb3JANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBhcnIuYXBwZW5kKGFjY291bnQpCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo0OAogICAgLy8gc2VsZi53aGl0ZWxpc3RbYXNhX2lkXSA9IGFyci5jb3B5KCkKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgphZGRfdG9fd2hpdGVsaXN0X2Vsc2VfYm9keUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NTEKICAgIC8vIG5ld19hcnIuYXBwZW5kKGFjY291bnQpCiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjUyCiAgICAvLyBzZWxmLndoaXRlbGlzdFthc2FfaWRdID0gbmV3X2Fyci5jb3B5KCkKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnRhc2tfdGhyZWUuY29udHJhY3QuU21hcnRBU0FDb250cm9sbGVyLmlzX3doaXRlbGlzdGVkKGFzYV9pZDogdWludDY0LCBhY2NvdW50OiBieXRlcykgLT4gdWludDY0Ogppc193aGl0ZWxpc3RlZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjU0LTU1CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGlzX3doaXRlbGlzdGVkKHNlbGYsIGFzYV9pZDogVUludDY0LCBhY2NvdW50OiBBZGRyZXNzKSAtPiBib29sOgogICAgcHJvdG8gMiAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiIgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo1NgogICAgLy8gaWYgYXNhX2lkIGluIHNlbGYud2hpdGVsaXN0OgogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBieXRlY18zIC8vICJ3aGl0ZWxpc3QiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBpc193aGl0ZWxpc3RlZF9hZnRlcl9pZl9lbHNlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjU3CiAgICAvLyBhcnIgPSBzZWxmLndoaXRlbGlzdFthc2FfaWRdLmNvcHkoKQogICAgZnJhbWVfZGlnIDMKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi53aGl0ZWxpc3QgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo1OAogICAgLy8gZm9yIGlkeCBpbiB1cmFuZ2UoYXJyLmxlbmd0aCk6CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2J1cnkgMgogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMQoKaXNfd2hpdGVsaXN0ZWRfZm9yX2hlYWRlckAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NTgKICAgIC8vIGZvciBpZHggaW4gdXJhbmdlKGFyci5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAyCiAgICA8CiAgICBieiBpc193aGl0ZWxpc3RlZF9hZnRlcl9pZl9lbHNlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjU5CiAgICAvLyBpZiBhcnJbaWR4XSA9PSBhY2NvdW50OgogICAgZnJhbWVfZGlnIDAKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18yIC8vIDMyCiAgICAqCiAgICBpbnRjXzIgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgYnogaXNfd2hpdGVsaXN0ZWRfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo2MAogICAgLy8gcmV0dXJuIFRydWUKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKaXNfd2hpdGVsaXN0ZWRfYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NTgKICAgIC8vIGZvciBpZHggaW4gdXJhbmdlKGFyci5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgaXNfd2hpdGVsaXN0ZWRfZm9yX2hlYWRlckAyCgppc193aGl0ZWxpc3RlZF9hZnRlcl9pZl9lbHNlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo2MQogICAgLy8gcmV0dXJuIEZhbHNlCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudGFza190aHJlZS5jb250cmFjdC5TbWFydEFTQUNvbnRyb2xsZXIubWludChhc2FfaWQ6IHVpbnQ2NCwgYW1vdW50OiB1aW50NjQsIHJlY2VpdmVyOiBieXRlcykgLT4gdWludDY0OgptaW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NjMtNjQKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIG1pbnQoc2VsZiwgYXNhX2lkOiBVSW50NjQsIGFtb3VudDogVUludDY0LCByZWNlaXZlcjogQWRkcmVzcykgLT4gYm9vbDoKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NjUKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJPbmx5IGNyZWF0b3IgY2FuIG1pbnQiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjcmVhdG9yIGNhbiBtaW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo2NgogICAgLy8gYXNzZXJ0IHNlbGYuaXNfd2hpdGVsaXN0ZWQoYXNhX2lkLCByZWNlaXZlciksICJSZWNlaXZlciBub3Qgd2hpdGVsaXN0ZWQiCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBpc193aGl0ZWxpc3RlZAogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG5vdCB3aGl0ZWxpc3RlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NjgKICAgIC8vIHNlbGYudG90YWxfbWludGVkICs9IGFtb3VudAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInRvdGFsX21pbnRlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9taW50ZWQgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTIKICAgICsKICAgIGJ5dGVjXzAgLy8gInRvdGFsX21pbnRlZCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo3MC03NgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNhX2lkLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1hbW91bnQsCiAgICAvLyAgICAgYXNzZXRfc2VuZGVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIGZlZT0wCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo3MwogICAgLy8gYXNzZXRfc2VuZGVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQXNzZXRTZW5kZXIKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NzAKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMyAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6NzUKICAgIC8vIGZlZT0wCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjcwLTc2CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc2FfaWQsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBhc3NldF9zZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1yZWNlaXZlci5uYXRpdmUsCiAgICAvLyAgICAgZmVlPTAKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo3NwogICAgLy8gcmV0dXJuIFRydWUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudGFza190aHJlZS5jb250cmFjdC5TbWFydEFTQUNvbnRyb2xsZXIudHJhbnNmZXIoYXNhX2lkOiB1aW50NjQsIHNlbmRlcjogYnl0ZXMsIHJlY2VpdmVyOiBieXRlcywgYW1vdW50OiB1aW50NjQpIC0+IHVpbnQ2NDoKdHJhbnNmZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo3OS04MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdHJhbnNmZXIoc2VsZiwgYXNhX2lkOiBVSW50NjQsIHNlbmRlcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGFtb3VudDogVUludDY0KSAtPiBib29sOgogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo4MQogICAgLy8gYXNzZXJ0IHNlbGYuaXNfd2hpdGVsaXN0ZWQoYXNhX2lkLCByZWNlaXZlciksICJSZWNlaXZlciBub3Qgd2hpdGVsaXN0ZWQiCiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMgogICAgY2FsbHN1YiBpc193aGl0ZWxpc3RlZAogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG5vdCB3aGl0ZWxpc3RlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6ODMtODkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzYV9pZCwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YW1vdW50LAogICAgLy8gICAgIGFzc2V0X3NlbmRlcj1zZW5kZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBmZWU9MAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMwogICAgaXR4bl9maWVsZCBBc3NldFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo4MwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18zIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo4OAogICAgLy8gZmVlPTAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6ODMtODkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzYV9pZCwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YW1vdW50LAogICAgLy8gICAgIGFzc2V0X3NlbmRlcj1zZW5kZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBmZWU9MAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjkwCiAgICAvLyByZXR1cm4gVHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy50YXNrX3RocmVlLmNvbnRyYWN0LlNtYXJ0QVNBQ29udHJvbGxlci5yZW1vdmVfZnJvbV93aGl0ZWxpc3QoYXNhX2lkOiB1aW50NjQsIGFjY291bnQ6IGJ5dGVzKSAtPiB2b2lkOgpyZW1vdmVfZnJvbV93aGl0ZWxpc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo5Mi05MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgcmVtb3ZlX2Zyb21fd2hpdGVsaXN0KHNlbGYsIGFzYV9pZDogVUludDY0LCBhY2NvdW50OiBBZGRyZXNzKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiAzCiAgICBieXRlY18yIC8vICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5Ojk0CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAiT25seSBjcmVhdG9yIGNhbiByZW1vdmUgZnJvbSB3aGl0ZWxpc3QiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBjcmVhdG9yIGNhbiByZW1vdmUgZnJvbSB3aGl0ZWxpc3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBpZiBhc2FfaWQgaW4gc2VsZi53aGl0ZWxpc3Q6CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGJ5dGVjXzMgLy8gIndoaXRlbGlzdCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IHJlbW92ZV9mcm9tX3doaXRlbGlzdF9hZnRlcl9pZl9lbHNlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5Ojk3CiAgICAvLyBhcnIgPSBzZWxmLndoaXRlbGlzdFthc2FfaWRdLmNvcHkoKQogICAgZnJhbWVfZGlnIDYKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi53aGl0ZWxpc3QgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo5OAogICAgLy8gbmV3X2FyciA9IER5bmFtaWNBcnJheVtBZGRyZXNzXSgpCiAgICBwdXNoYnl0ZXMgMHgwMDAwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBmb3IgaWR4IGluIHVyYW5nZShhcnIubGVuZ3RoKToKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfYnVyeSA1CiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSA0CgpyZW1vdmVfZnJvbV93aGl0ZWxpc3RfZm9yX2hlYWRlckAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Rhc2tfdGhyZWUvY29udHJhY3QucHk6OTkKICAgIC8vIGZvciBpZHggaW4gdXJhbmdlKGFyci5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2RpZyA1CiAgICA8CiAgICBieiByZW1vdmVfZnJvbV93aGl0ZWxpc3RfYWZ0ZXJfZm9yQDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90YXNrX3RocmVlL2NvbnRyYWN0LnB5OjEwMAogICAgLy8gaWYgYXJyW2lkeF0gIT0gYWNjb3VudDoKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMiAvLyAzMgogICAgKgogICAgaW50Y18yIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9kaWcgLTEKICAgICE9CiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfYnVyeSAyCiAgICBieiByZW1vdmVfZnJvbV93aGl0ZWxpc3RfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToxMDEKICAgIC8vIG5ld19hcnIuYXBwZW5kKGFycltpZHhdKQogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMwogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDIKCnJlbW92ZV9mcm9tX3doaXRlbGlzdF9hZnRlcl9pZl9lbHNlQDU6CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weTo5OQogICAgLy8gZm9yIGlkeCBpbiB1cmFuZ2UoYXJyLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgNAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNAogICAgYiByZW1vdmVfZnJvbV93aGl0ZWxpc3RfZm9yX2hlYWRlckAyCgpyZW1vdmVfZnJvbV93aGl0ZWxpc3RfYWZ0ZXJfZm9yQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdGFza190aHJlZS9jb250cmFjdC5weToxMDIKICAgIC8vIHNlbGYud2hpdGVsaXN0W2FzYV9pZF0gPSBuZXdfYXJyLmNvcHkoKQogICAgZnJhbWVfZGlnIDYKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBmcmFtZV9kaWcgMQogICAgYm94X3B1dAoKcmVtb3ZlX2Zyb21fd2hpdGVsaXN0X2FmdGVyX2lmX2Vsc2VAODoKICAgIHJldHN1Ygo=", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [387, 504, 686], "errorMessage": "Index access is out of bounds"}, {"pc": [109, 128, 165, 199, 218], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [338], "errorMessage": "Only creator can add to whitelist"}, {"pc": [277], "errorMessage": "Only creator can create ASA"}, {"pc": [536], "errorMessage": "Only creator can mint"}, {"pc": [631], "errorMessage": "Only creator can remove from whitelist"}, {"pc": [544, 591], "errorMessage": "Receiver not whitelisted"}, {"pc": [266], "errorMessage": "can only call when creating"}, {"pc": [112, 131, 168, 202, 221], "errorMessage": "can only call when not creating"}, {"pc": [548], "errorMessage": "check self.total_minted exists"}, {"pc": [361, 478, 654], "errorMessage": "check self.whitelist entry exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetCreateArgs:
    """Dataclass for asset_create arguments"""
    total: int
    decimals: int
    unit_name: str
    asset_name: str
    url: str

    @property
    def abi_method_signature(self) -> str:
        return "asset_create(uint64,uint64,string,string,string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddToWhitelistArgs:
    """Dataclass for add_to_whitelist arguments"""
    asa_id: int
    account: str

    @property
    def abi_method_signature(self) -> str:
        return "add_to_whitelist(uint64,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintArgs:
    """Dataclass for mint arguments"""
    asa_id: int
    amount: int
    receiver: str

    @property
    def abi_method_signature(self) -> str:
        return "mint(uint64,uint64,address)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class TransferArgs:
    """Dataclass for transfer arguments"""
    asa_id: int
    sender: str
    receiver: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "transfer(uint64,address,address,uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RemoveFromWhitelistArgs:
    """Dataclass for remove_from_whitelist arguments"""
    asa_id: int
    account: str

    @property
    def abi_method_signature(self) -> str:
        return "remove_from_whitelist(uint64,address)void"


class SmartAsaControllerParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_create(
        self,
        args: tuple[int, int, str, str, str] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(uint64,uint64,string,string,string)uint64",
            "args": method_args,
        }))

    def add_to_whitelist(
        self,
        args: tuple[int, str] | AddToWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_to_whitelist(uint64,address)void",
            "args": method_args,
        }))

    def mint(
        self,
        args: tuple[int, int, str] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(uint64,uint64,address)bool",
            "args": method_args,
        }))

    def transfer(
        self,
        args: tuple[int, str, str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(uint64,address,address,uint64)bool",
            "args": method_args,
        }))

    def remove_from_whitelist(
        self,
        args: tuple[int, str] | RemoveFromWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_from_whitelist(uint64,address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class SmartAsaControllerCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_create(
        self,
        args: tuple[int, int, str, str, str] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(uint64,uint64,string,string,string)uint64",
            "args": method_args,
        }))

    def add_to_whitelist(
        self,
        args: tuple[int, str] | AddToWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_to_whitelist(uint64,address)void",
            "args": method_args,
        }))

    def mint(
        self,
        args: tuple[int, int, str] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(uint64,uint64,address)bool",
            "args": method_args,
        }))

    def transfer(
        self,
        args: tuple[int, str, str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(uint64,address,address,uint64)bool",
            "args": method_args,
        }))

    def remove_from_whitelist(
        self,
        args: tuple[int, str] | RemoveFromWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_from_whitelist(uint64,address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class SmartAsaControllerSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_create(
        self,
        args: tuple[int, int, str, str, str] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(uint64,uint64,string,string,string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def add_to_whitelist(
        self,
        args: tuple[int, str] | AddToWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "add_to_whitelist(uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mint(
        self,
        args: tuple[int, int, str] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint(uint64,uint64,address)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def transfer(
        self,
        args: tuple[int, str, str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "transfer(uint64,address,address,uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def remove_from_whitelist(
        self,
        args: tuple[int, str] | RemoveFromWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "remove_from_whitelist(uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    asa_id: int
    total_minted: int

class SmartAsaControllerState:
    """Methods to access state for the current SmartASAController app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def asa_id(self) -> int:
        """Get the current value of the asa_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("asa_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_minted(self) -> int:
        """Get the current value of the total_minted key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_minted")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def whitelist(self) -> "_MapState[int, list[str]]":
        """Get values from the whitelist map in box state"""
        return _MapState(
            self.app_client.state.box,
            "whitelist",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class SmartAsaControllerClient:
    """Client for interacting with SmartASAController smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SmartAsaControllerParams(self.app_client)
        self.create_transaction = SmartAsaControllerCreateTransactionParams(self.app_client)
        self.send = SmartAsaControllerSend(self.app_client)
        self.state = SmartAsaControllerState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SmartAsaControllerClient":
        return SmartAsaControllerClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SmartAsaControllerClient":
        return SmartAsaControllerClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SmartAsaControllerClient":
        return SmartAsaControllerClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SmartAsaControllerComposer":
        return SmartAsaControllerComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_create(uint64,uint64,string,string,string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["add_to_whitelist(uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint(uint64,uint64,address)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["transfer(uint64,address,address,uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["remove_from_whitelist(uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SmartAsaControllerBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating SmartAsaController contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class SmartAsaControllerFactory(algokit_utils.TypedAppFactoryProtocol[SmartAsaControllerBareCallCreateParams, None, None]):
    """Factory for deploying and managing SmartAsaControllerClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SmartAsaControllerFactoryParams(self.app_factory)
        self.create_transaction = SmartAsaControllerFactoryCreateTransaction(self.app_factory)
        self.send = SmartAsaControllerFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SmartAsaControllerBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SmartAsaControllerClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SmartAsaControllerClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SmartAsaControllerClient:
        """Get an app client by creator address and name"""
        return SmartAsaControllerClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SmartAsaControllerClient:
        """Get an app client by app ID"""
        return SmartAsaControllerClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SmartAsaControllerFactoryParams:
    """Parameters for creating transactions for SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SmartAsaControllerFactoryCreateParams(app_factory)
        self.update = SmartAsaControllerFactoryUpdateParams(app_factory)
        self.delete = SmartAsaControllerFactoryDeleteParams(app_factory)

class SmartAsaControllerFactoryCreateParams:
    """Parameters for 'create' operations of SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def asset_create(
        self,
        args: tuple[int, int, str, str, str] | AssetCreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_create(uint64,uint64,string,string,string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_create(uint64,uint64,string,string,string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def add_to_whitelist(
        self,
        args: tuple[int, str] | AddToWhitelistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the add_to_whitelist(uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "add_to_whitelist(uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint(
        self,
        args: tuple[int, int, str] | MintArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint(uint64,uint64,address)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint(uint64,uint64,address)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def transfer(
        self,
        args: tuple[int, str, str, int] | TransferArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the transfer(uint64,address,address,uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "transfer(uint64,address,address,uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def remove_from_whitelist(
        self,
        args: tuple[int, str] | RemoveFromWhitelistArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the remove_from_whitelist(uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "remove_from_whitelist(uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class SmartAsaControllerFactoryUpdateParams:
    """Parameters for 'update' operations of SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SmartAsaControllerFactoryDeleteParams:
    """Parameters for 'delete' operations of SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SmartAsaControllerFactoryCreateTransaction:
    """Create transactions for SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SmartAsaControllerFactoryCreateTransactionCreate(app_factory)


class SmartAsaControllerFactoryCreateTransactionCreate:
    """Create new instances of SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SmartAsaControllerFactorySend:
    """Send calls to SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SmartAsaControllerFactorySendCreate(app_factory)


class SmartAsaControllerFactorySendCreate:
    """Send create calls to SmartAsaController contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SmartAsaControllerClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SmartAsaControllerClient(result[0]), result[1]


class SmartAsaControllerComposer:
    """Composer for creating transaction groups for SmartAsaController contract calls"""

    def __init__(self, client: "SmartAsaControllerClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def asset_create(
        self,
        args: tuple[int, int, str, str, str] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SmartAsaControllerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_create(uint64,uint64,string,string,string)uint64", v
            )
        )
        return self

    def add_to_whitelist(
        self,
        args: tuple[int, str] | AddToWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SmartAsaControllerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_to_whitelist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add_to_whitelist(uint64,address)void", v
            )
        )
        return self

    def mint(
        self,
        args: tuple[int, int, str] | MintArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SmartAsaControllerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint(uint64,uint64,address)bool", v
            )
        )
        return self

    def transfer(
        self,
        args: tuple[int, str, str, int] | TransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SmartAsaControllerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.transfer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "transfer(uint64,address,address,uint64)bool", v
            )
        )
        return self

    def remove_from_whitelist(
        self,
        args: tuple[int, str] | RemoveFromWhitelistArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SmartAsaControllerComposer":
        self._composer.add_app_call_method_call(
            self.client.params.remove_from_whitelist(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "remove_from_whitelist(uint64,address)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SmartAsaControllerComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SmartAsaControllerComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
